#!/usr/bin/env python
# encoding: utf-8

__doc__ = """
Runs PUFF forced MD simulations from a PUFF configuration files

Usage: puff [-hr] <puff_config>

-r  report
<puff_config> is essentially a PYTHON dictionary:
  { 
    'in_pdb'             : 'pdb/hairpin.pdb', 
    # 'in_md'             : 'sim/hairpin/md/md',
    # 'in_top'            : 'sim/hairpin/sim.top',
    # 'in_crds'           : 'sim/hairpin/sim.crds',
    'n_equilibrate_step' : 5000, 
    'n_step'             : 100000,
    'n_step_per_pulse'   : 100,
    'force_field'        : 'AMBER11', 
    'temp_back'          : 300,
    'pulse_strategy'     : 'force.make_puff_fn([0, 1, 2, 3, 4, 5, 6], [11, 12, 13, 14, 15], 2.0, 0.1, 300)', 
    'sim_dir'            : 'puff/hairpin/v2.0_t100', 
    'top_dir'            : 'puff/hairpin' 
  }
"""

import os
import shutil
import time
import random

from pdbremix import util
from pdbremix import simulate
from pdbremix import force
from pdbremix.lib.docopt import docopt


def make_abs_fnames_in_dict(params):
  keywords = ['pdb', 'top', 'md', 'crd', 'dir', 'top']
  for key in params:
    if isinstance(params[key], str):
      is_fname = False
      for keyword in keywords:
        if keyword in key:
          is_fname = True
          break
      if is_fname:
        params[key] = os.path.abspath(params[key])


def wait_for_file_to_be_created(fname):
  def wait_for_short_time():
    time.sleep(2.0 + random.randint(1, 100)/10.0)
  print 'Waiting for %s...' % fname
  while not os.path.isfile(fname):
    wait_for_short_time()


def get_equilibrated_md(parms):
  # check if starting from existing MD simulation 
  if 'in_md' in parms and parms['in_md']:
    top, crds, vels = simulate.get_restart_files(parms['in_md'])
    print "Equilibration: from existing simulation"
    return parms['in_md']

  in_md = os.path.join(parms['top_dir'], 'equil/md')

  # check if equilibration is running by other parallel process
  equil_start = os.path.join(parms['top_dir'], 'equil_start')
  equil_finish = os.path.join(parms['top_dir'], 'equil_finish')
  if os.path.isfile(equil_finish):
    print "Equilibration: another process has already completed this"
    return in_md
  if os.path.isfile(equil_start):
    print "Equilibration: waiting for another process to finish this"
    wait_for_file_to_be_created(equil_finish)
    return in_md

  # Actually run equilibration 
  save_dir = os.getcwd()
  util.goto_dir(parms['top_dir'])
  open(equil_start, 'w').write('start')

  # Get topology files or generate from PDB
  if 'in_top' in parms and 'in_crds' in parms:
    print "Equilibration: from", os.path.basename(parms['in_top'])
    top = os.path.abspath('sim.top')
    crds = os.path.abspath('sim.crd')
    shutil.copy(parms['in_top'], top)
    shutil.copy(parms['in_crds'], crds)
  elif 'in_pdb' in parms:
    print "Equilibration: from", os.path.basename(parms['in_pdb'])
    top, crds = simulate.pdb_to_topology(
        parms['force_field'], parms['in_pdb'], 'sim')
  else:
    raise Error('Can\'t figure out input for equilibration')

  util.goto_dir('min')
  simulate.minimize(parms['force_field'], top, crds, 'min')
  top, crds, vels = simulate.get_restart_files('../min/min')
  util.goto_dir('../equil')
  simulate.langevin(
      parms['force_field'], 
      top, crds, vels, 
      parms['n_equilibrate_step'], 
      parms['temp_back'], 'md')
  open(equil_finish, 'w').write('finish')
  os.chdir(save_dir)

  return in_md

  
def process_config(config):
  parms = util.read_dict(config)
  make_abs_fnames_in_dict(parms)
  in_md = get_equilibrated_md(parms)

  save_dir = os.getcwd()
  util.goto_dir(parms['sim_dir'])

  sim_config = 'md.puff.config'
  if util.is_same_dict_in_file(parms, sim_config):
    print "PUFF: already done"
    return

  print "Strategy:", parms['pulse_strategy']
  pulse_fn = eval(parms['pulse_strategy'])
  simulate.pulse(
      parms['force_field'], in_md, 'md', parms['n_step'], 
      pulse_fn, parms['n_step_per_pulse'])

  util.write_dict(sim_config, parms)

  os.chdir(save_dir)
  open(config + '.done', 'w').write('done')


if __name__ == '__main__':
  arg = docopt(__doc__)
  config = os.path.basename(arg['<puff_config>'])
  config_dir = os.path.dirname(config)
  if config_dir:
    os.chdir(config_dir)
  if arg['-r']:
    md_dir = util.read_dict(config)['sim_dir']
    for entry in force.read_puff_out(md_dir):
      print entry
  else:
    process_config(config)

